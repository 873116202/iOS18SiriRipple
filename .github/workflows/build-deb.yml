name: Build iOS18SiriRipple.deb

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        echo "Xcode版本: $(xcodebuild -version)"
        echo "工作目录: $(pwd)"
        echo "文件夹内容:"
        ls -la
      
    - name: Verify project exists
      id: check_project
      run: |
        if [ ! -d "iOS18SiriRipple.xcodeproj" ]; then
          echo "❌ 错误：未找到 iOS18SiriRipple.xcodeproj"
          exit 1
        else
          echo "✅ 找到项目文件"
        fi
        
    - name: Build project
      run: |
        # 添加详细日志
        set -x  # 启用详细命令回显
        
        # 清理历史编译文件
        rm -rf build
        
        # 使用绝对路径确保位置正确
        xcodebuild -project iOS18SiriRipple.xcodeproj \
                   -scheme iOS18SiriRipple \
                   -configuration Release \
                   -sdk iphoneos \
                   -derivedDataPath $PWD/build \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   | tee xcodebuild.log  # 保存详细日志
        
        # 验证编译产物存在
        if [ ! -d "build/Build/Products/Release-iphoneos" ]; then
          echo "❌ 编译失败，未生成产物目录"
          echo "=== Xcode编译日志 ==="
          cat xcodebuild.log
          exit 1
        fi
        
    - name: Create deb package
      run: |
        # 设置严格错误检查
        set -euo pipefail
        
        # 显式定义编译产物路径
        BUILD_PATH="build/Build/Products/Release-iphoneos"
        BINARY="$BUILD_PATH/iOS18SiriRipple.framework/iOS18SiriRipple"
        
        echo "📦 编译产物路径: $BINARY"
        
        # 验证文件存在
        if [ ! -f "$BINARY" ]; then
          echo "❌ 错误：找不到编译产物：$BINARY"
          echo "目录内容："
          ls -lR "$BUILD_PATH"
          exit 1
        fi
        
        # 创建包结构
        mkdir -p package/Library/MobileSubstrate/DynamicLibraries
        mkdir -p package/DEBIAN
        
        # 复制文件（使用绝对路径）
        cp "$BINARY" package/Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.dylib
        echo "✅ 已复制二进制文件"
        
        # 后续打包代码保持不变...
        # [保持原打包逻辑，但此处省略重复代码]
        
        # 添加成功标记
        echo "🎉 DEB 包创建成功！"
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: iOS18SiriRipple.deb
        path: iOS18SiriRipple.deb
      
    # 后续步骤保持不变...

        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.deb
          build/*.dylib
        tag_name: ${{ github.ref }}
        body: "iOS18SiriRipple deb package"
