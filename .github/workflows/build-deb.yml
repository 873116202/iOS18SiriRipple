name: Build iOS18SiriRipple.deb

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
    # 1. 检出代码
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. 环境诊断
    - name: Diagnostic information
      run: |
        echo "##[group]🛠️ 环境诊断"
        echo "工作目录: $(pwd)"
        echo "Xcode版本: $(xcodebuild -version)"
        echo "可用SDK:"
        xcodebuild -showsdks
        echo "项目结构:"
        ls -la
        echo "##[endgroup]"
      
    # 3. 安装必要工具
    - name: Install build tools
      run: |
        brew update
        # 安装必要工具
        brew install dpkg ldid
      
    # 4. 设置开发环境
    - name: Setup environment
      run: |
        # 设置Xcode路径
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        
        # 创建缓存清理脚本
        cat > clean_cache.sh <<EOF
        #!/bin/bash
        echo "清理构建缓存..."
        rm -rf build_output
        rm -rf ~/Library/Developer/Xcode/DerivedData/*
        rm -rf ~/Library/Caches/com.apple.dt.Xcode/*
        echo "✅ 缓存清理完成"
        EOF
        chmod +x clean_cache.sh
        
        # 确保日志目录存在
        mkdir -p logs
      
    # 5. 编译项目（使用参数覆盖设置）
    - name: Build project
      run: |
        # 清理缓存
        ./clean_cache.sh
        
        cd iOS18SiriRipple
        
        # 编译命令 - 使用参数覆盖设置
        set -x  # 开启详细日志
        xcodebuild clean build \
          -project iOS18SiriRipple.xcodeproj \
          -scheme iOS18SiriRipple \
          -configuration Release \
          -sdk iphoneos \
          ARCHS=arm64 \
          VALID_ARCHS=arm64 \
          SDKROOT=iphoneos \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath ../build_output \
          | tee ../xcodebuild.log
        set +x  # 关闭详细日志
        
        # 验证编译产物
        BINARY_PATH="../build_output/Build/Products/Release-iphoneos/iOS18SiriRipple.framework/iOS18SiriRipple"
        if [ ! -f "$BINARY_PATH" ]; then
          echo "::error::❌ 编译产物不存在"
          echo "构建日志:"
          cat ../xcodebuild.log
          echo "构建目录内容:"
          ls -lR ../build_output
          exit 1
        else
          echo "✅ 编译成功！产物路径: $BINARY_PATH"
          file "$BINARY_PATH"
        fi
        
        # 签名二进制文件
        ldid -S "$BINARY_PATH"
        echo "✅ 二进制文件已签名"
      
    # 6. 创建DEB包
    - name: Create deb package
      run: |
        # 确保在正确的工作目录
        cd ${GITHUB_WORKSPACE}
        
        # 创建DEB包结构
        mkdir -p package/Library/MobileSubstrate/DynamicLibraries
        mkdir -p package/DEBIAN
        
        # 复制编译产物
        cp build_output/Build/Products/Release-iphoneos/iOS18SiriRipple.framework/iOS18SiriRipple package/Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.dylib
        
        # 创建plist配置文件
        cat > package/Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>Filter</key>
            <dict>
                <key>Bundles</key>
                <array>
                    <string>com.apple.springboard</string>
                </array>
            </dict>
        </dict>
        </plist>
        EOF
        
        # 创建control控制文件
        cat > package/DEBIAN/control <<EOF
        Package: com.behuge.ios18siriripple
        Name: iOS18SiriRipple
        Version: 1.0.0
        Architecture: iphoneos-arm
        Description: iOS 18 style Siri ripple animation
        Maintainer: 873116202
        Author: 873116202
        Section: Tweaks
        Depends: mobilesubstrate
        EOF
        
        # 创建安装后脚本
        cat > package/DEBIAN/postinst <<EOF
        #!/bin/bash
        # 设置文件权限
        /bin/chmod 0755 /Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.dylib
        /bin/chmod 0644 /Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.plist
        
        # 重启SpringBoard
        /usr/bin/killall -9 SpringBoard
        exit 0
        EOF
        chmod 0755 package/DEBIAN/postinst
        
        # 打包为DEB文件
        dpkg-deb -b package iOS18SiriRipple.deb
        echo "🎉 DEB包创建成功: iOS18SiriRipple.deb"
      
    # 7. 上传制品
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: iOS18SiriRipple.deb
      
    # 8. 确保日志收集（无论成功或失败）
    - name: Collect and upload logs
      if: always()  # 无论成功或失败都执行
      run: |
        # 确保日志目录存在
        mkdir -p logs
        
        # 收集所有可能相关的日志
        if [ -f "xcodebuild.log" ]; then
          cp xcodebuild.log logs/
        fi
        
        if [ -d "build_output" ]; then
          ls -lR build_output > logs/build_directory.txt
        fi
        
        # 创建日志包
        timestamp=$(date +%Y%m%d%H%M%S)
        zip -r "error-logs-$timestamp.zip" logs/
        echo "✅ 日志包已创建: error-logs-$timestamp.zip"
      
    # 9. 上传错误日志（确保在任何情况下都能上传
