name: Build iOS18SiriRipple.deb

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-deb:
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
    # 1. 检出代码到根目录
    - name: Checkout code
      uses: actions/checkout@v4
      
    # 2. 确认根目录下的项目结构
    - name: Verify root directory structure
      run: |
        echo "📂 根目录内容:"
        ls -la
        echo ""
        
        if [ ! -d "iOS18SiriRipple.xcodeproj" ]; then
          echo "❌ 错误：在根目录未找到 iOS18SiriRipple.xcodeproj"
          echo "请确保项目文件位于仓库根目录"
          exit 1
        else
          echo "✅ 在根目录找到 iOS18SiriRipple.xcodeproj"
        fi
        
        if [ ! -d "iOS18SiriRipple" ]; then
          echo "⚠️ 注意：未找到 iOS18SiriRipple 源码目录"
        else
          echo "✅ 在根目录找到 iOS18SiriRipple 源码目录"
        fi
      
    # 3. 设置开发环境  
    - name: Setup Xcode environment
      run: |
        sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
        xcodebuild -version
        echo "工作目录: $(pwd)"
      
    # 4. 安装必要工具
    - name: Install build tools
      run: |
        brew update
        brew install dpkg
        brew install ldid
      
    # 5. 编译项目
    - name: Build project (from root)
      run: |
        # 确保在根目录工作
        echo "🛠️ 开始构建项目..."
        xcodebuild -project iOS18SiriRipple.xcodeproj \
                   -scheme iOS18SiriRipple \
                   -configuration Release \
                   -sdk iphoneos \
                   -derivedDataPath build_output \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO
        
        echo "✅ 项目编译完成"
      
    # 6. 创建DEB包
    - name: Create deb package
      run: |
        # 设置编译产物路径
        BINARY_PATH="build_output/Build/Products/Release-iphoneos/iOS18SiriRipple.framework/iOS18SiriRipple"
        
        # 验证编译产物存在
        if [ ! -f "$BINARY_PATH" ]; then
          echo "❌ 错误：未找到编译产物: $BINARY_PATH"
          echo "编译输出目录内容:"
          ls -lR build_output
          exit 1
        fi
        
        # 创建DEB包结构
        mkdir -p package/Library/MobileSubstrate/DynamicLibraries
        mkdir -p package/DEBIAN
        
        # 复制编译产物
        cp "$BINARY_PATH" package/Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.dylib
        echo "✅ 已复制二进制文件"
        
        # 创建plist配置文件
        cat > package/Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.plist <<EOF
        { 
            Filter = { 
                Bundles = ( "com.apple.springboard" ); 
            }; 
        }
        EOF
        echo "✅ 已创建plist文件"
        
        # 创建control控制文件
        cat > package/DEBIAN/control <<EOF
        Package: com.behuge.ios18siriripple
        Name: iOS18SiriRipple
        Version: 1.0.0
        Architecture: iphoneos-arm
        Description: iOS 18 style Siri ripple animation
        Maintainer: 873116202
        Author: 873116202
        Section: Tweaks
        Depends: mobilesubstrate
        EOF
        echo "✅ 已创建control文件"
        
        # 创建安装后脚本
        cat > package/DEBIAN/postinst <<EOF
        #!/bin/sh
        # 设置文件权限
        chmod 0755 /Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.dylib
        chmod 0644 /Library/MobileSubstrate/DynamicLibraries/iOS18SiriRipple.plist
        
        # 提示重启SpringBoard而非整个系统
        launchctl stop com.apple.SpringBoard
        launchctl start com.apple.SpringBoard
        
        echo "✅ iOS18SiriRipple已成功安装！请解锁设备查看效果"
        EOF
        chmod 0755 package/DEBIAN/postinst
        echo "✅ 已创建postinst脚本"
        
        # 打包为DEB文件
        dpkg-deb -b package iOS18SiriRipple.deb
        echo "🎉 DEB包创建成功：iOS18SiriRipple.deb"
      
    # 7. 上传制品
    - name: Upload DEB artifact
      uses: actions/upload-artifact@v4
      with:
        name: iOS18SiriRipple.deb
        path: iOS18SiriRipple.deb
      
    # 8. 创建发布（可选）
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: iOS18SiriRipple.deb
